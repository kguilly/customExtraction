/*
This file will test if its possible to send a file pointer to CUDA and then extract the GRIB 2 file using 
an object generated by ECCODES that will indicate where to find the values 


*/



#include <iostream>
#include <stdlib.h>
#include "eccodes.h"
// #include <cuda_runtime.h>
#include <vector>
#include <string>

// personal functions
#include "decompress_grib_test.h"
#include "shared_test_objs.h"

#define MAX_NUM_STRINGS 100
#define MAX_STRING_LENGTH 100
#define numParams 3
#define num_total_params = 200


const char * grib_file_path = "/media/kaleb/extraSpace/wrf/";
const char * output_file_path = "/home/kaleb/Desktop/cuda_4-3/";
std::vector<std::string> vctrDate = {"2020", "01", "01"};

int numStations;
long num_grb_points;
bool blnParamArr[num_total_params];

void build_index_obj(station_t*);
void read_grib_data();


int main() {

    station_t st_1;
    station_t st_2;
    st_1.lat = 30.2241;
    st_1.lon = 272.0198;

    st_2.lat = 29.7958;
    st_2.lon = 270.8229;

    station_t * stationArr = new station_t[2];
    numStations = 2;
    stationArr[0] = st_1;
    stationArr[1] = st_2;

    // build the blnParamArr to select parameters 10-20
    for (int i=0; i<num_total_params; i++) {
        if (i < 21 && i > 9) {
            blnParamArr[i] = true;
        }
        else {
            blnParamArr[i] = false;
        }
    }

    // build the grib_index object
    build_index_obj(stationArr);

    read_grib_data();

    codes_index_delete(gr_idx_obj);
    delete [] stationArr;

    return 0;
}

void build_index_obj (station_t* stationArr) {
    codes_handle* h    = NULL;
    gr_idx_obj = NULL;
    long *steps, *levels, *numbers; /* arrays */
    char** shortName = NULL;
    int i, j, k, l;
    size_t stepSize, levelSize, shortNameSize, numberSize;
    long ostep, olevel, onumber;
    char oshortName[200];
    size_t lenshortName = 200;
    int ret = 0, count = 0, err = 0, missing = 0;
    long num_points = 0;
    FILE* f;

    // if (argc != 2) usage(argv[0]);
    //infile = argv[1];

    printf("finding the nearest points for the stations...\n");
    std::string full_path = grib_file_path + vctrDate.at(0) + "/" + vctrDate.at(0) + \
                            vctrDate.at(1) + vctrDate.at(2) + "/" + "hrrr."  + vctrDate.at(0) + \
                            vctrDate.at(1) + vctrDate.at(2) + ".00.00.grib2";
    try {
        f = fopen(full_path.c_str(), "rb");
        if (!f) throw(full_path);
    } catch (std::string full_path) {
        std::cout << "could not open file" << std::endl;
        return;
    }

    double* grib_lats, *grib_lons, *gr_vals;
    codes_handle * idx_h = codes_handle_new_from_file(0, f, PRODUCT_GRIB, &err);

    if (!idx_h || err != 0) {
        std::cout << "could not make handle" << std::endl;
        return;
    }
    CODES_CHECK(codes_get_long(idx_h, "numberOfPoints", &num_points), 0);
    num_grb_points = num_points;
    CODES_CHECK(codes_set_double(idx_h, "missingValue", missing), 0);

    grib_lats = (double*)malloc(num_points * sizeof(double));
    if(!grib_lats){
        fprintf(stderr, "Error: unable to allocate %ld bytes\n", (long)(num_points * sizeof(double)));
        exit(0);
    }
    grib_lons = (double*)malloc(num_points * sizeof(double));
    if (!grib_lons){
        fprintf(stderr, "Error: unable to allocate %ld bytes\n", (long)(num_points * sizeof(double)));
        std::free(grib_lats);
        exit(0);
    }
    gr_vals = (double*)malloc(num_points * sizeof(double));
    if(!gr_vals){
        fprintf(stderr, "Error: unable to allocate %ld bytes\n", (long)(num_points * sizeof(double)));
        std::free(grib_lats);
        std::free(grib_lons);
        exit(0);
    }
    CODES_CHECK(codes_grib_get_data(idx_h, grib_lats, grib_lons, gr_vals), 0);

    stationArr = extract_indexes(stationArr, grib_lats, grib_lons, numStations, num_points);

    std::free(grib_lats);
    std::free(grib_lons);
    std::free(gr_vals);
    fclose(f);

    printf("The nearest points for the stations are: \n");
    for (int i=0; i<numStations; i++) {
        int closestPt = stationArr[i].closestPoint;
        printf("Station %d's closest point: %d\n", i, closestPt);

    }


    
}

void read_grib_data() {
    std::string full_path = grib_file_path + vctrDate.at(0) + "/" + vctrDate.at(0) + \
                            vctrDate.at(1) + vctrDate.at(2) + "/" + "hrrr."  + vctrDate.at(0) + \
                            vctrDate.at(1) + vctrDate.at(2) + ".00.00.grib2";
    try {
        f = fopen(full_path.c_str(), "rb");
        if (!f) throw(full_path);
    } catch (std::string full_path) {
        std::cout << "could not open file" << std::endl;
        return;
    }

    // call the function to orchestrate reading the data
    orchestrate_grib_decompression(stationArr, f, blnParamArr, numStations, num_total_params, num_grb_points);
}




